=====================================================================================================================
 _      _      __    _______       ________    ______       __     _______      _____         _________           _
| |     \ \   / /   | _____  \    | _______|  |  ____ \    |__|   |  ____  \   |  ___ \      |_   ___  |         | |
| |      \ \_/ /    | |____| |    | |         | |____| |    __    | |____| |   | |    \ \      | |   | |         | |
| |       \   /     |  ___  /     | |______   |       /    |  |   |  ___  /    | |     \ \     | |    \ \       / /
| |        | |      | |  \ \      |  ______|  |  ____ \    |  |   | |  \ \     | |      | |    | |     \ \     / /
| |        | |      | |   \ \     | |         | |    \ |   |  |   | |   \ \    | |     / /     | |      \ \   / /
| |__      | |      | |    \ \    | |______   | |____/ /   |  |   | |    \ \   | |____/ /     _| |_      \ \_/ /
|____|     |_|      |_|     \_\   |________|  |_______/    |__|   |_|     \_\  |______/      |_____|      \__ /
=====================================================================================================================


## Basic Info
------------------------------------------------
           my name : Jingda(Kingston) Chen    
    student number : 301295759                
     SFU user name : jca303                   
   lecture section : CMPT 300 D100, Fall 2015 
 instructor's name : Brian Booth              
         TA's name : Scott Kristjanson        


## Project Description
------------------------------------------------
Lyrebird IV is a multi-level decryption system consisting of a server and serveral multi-process clients. Lyrebird IV has two parts: lyrebird.server and lyrebird.client. The former is responsible to dispatch tasks, while the latter do the actual work of descryption.

There are only two file share by lyrebird.server and lyrebird.client. They are lyretalk.c that specifies the functions lyrespeak and lyrelisten, and gettime.c that specifies function gettime:

    * lyretalk.c  : the socket send/receive block
        - lyrespeak    : send content through socket
        - lyrelisten   : receive content from socket
    * gettime.c   : the get format block
        - gettime      : get current time and format it

Lyrebird.server is specified in lyrenest.c. It first sets up a socket to accept clients' connections. When a client asks for tasks, it reads tasks from the given config file and then sends them to clients through sockets. The structure of lyrebird.server is simple. It only has one file with a main function and six helper functions: serverInit, showServer, showInitErr, destruct, welcome, dropClient.

    - serverInit  : set up server and listen
    - showServer  : print server situation: process ID, IP address and port number
    - showInitErr : print error during serverInit
    - destruct    : tell all clients to exit, close sockets, free memory
    - welcome     : accept a client connection
    - dropClient  : remove a client from client list.

Lyrebird.client is specified in lyrebird.c. It first fork n-1 child processes, where n is the number of available cores of the workstation it's on. Each time a child process asks for a task, it asks server to give a task and then dispatch it to the child process. The structure of lyrebird.client is more complicated. However, it is mostly adapted from Lyrebird III. The following is the brief structure of lyrebird.client.

    * decrypt.c   : The block responsible for decrypting a line
        - fastpower    : Do modular power in a O(log y) time. Is called by decrypt()
        - decrypt      : Do the actual line decryption work. Is called by lyreegg()
    * lyreegg.c   : The block responsible for decrypting a file
        - lyreegg      : Do the file decryption work, is called by childRoutine() in lyrebird.c
    * lyrebird.c  : The main block of lyrebird.client, contain main function and 5 helpers
        - callhome     : make a connection to the server
        - freemem      : free all the memory before exiting
        - allocmem     : allocate necessary memory and handle error
        - createPipes  : create pipes for child-parent processes communication
        - childRoutine : seperate child process from parent process
        - killson      : make a child process exit


## Building and Running
------------------------------------------------
1. Please put memwatch.h and memwatch.c in root folder;
2. Type "make clean", to make sure that previous building is cleaned up;
3. Execute command "make", to build the project;
4. The executable binary file lyrebird.server and lyrebird.client are in root directory;
5. put the lyrebird.server on a server machine, along with the configure file and log file, and run the command:
        ./lyrebird.server [configure file] [log file]
6. put lyrebird.client on another computer, along with the encrypted files, and run the command:
        ./lyrebird.client [IP address] [port number]
   Note here the IP address and the port number are same as those printed by lyrebird.server
